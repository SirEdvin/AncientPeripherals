{
  "name": "Extra types",
  "icon": "minecraft:writable_book",
  "category": "progressiveperipherals:api_documentation",
  "priority": true,
  "pages": [
    {
      "type": "text",
      "text": "This entry will describe additional variable types, mostly table format restrictions, that should be passed in api calls"
    },
    {
      "type": "text",
      "title": "Color",
      "anchor": "Color",
      "text": "Color is table in next format $(o){red = 255, green = 0, blue = 120}$(). Values should be integers from 0 to 255, any additional keys will be ignored.$(p)If you pass values bigger than 255 it will cause color corruption."
    },
    {
      "type": "text",
      "title": "BlockPos",
      "anchor": "BlockPos",
      "text": "BlockPos is table in next format $(o){x = 5, z = 6, y = 6}$(). Values should be integers, any additional keys will be ignored.$(p)Note, that BlockPos are $(l)always relative$() to peripheral position."
    },
    {
      "type": "text",
      "title": "BlockState",
      "anchor": "BlockState",
      "text": "BlockState is table of minecraft BlockState representation. Only one way to detect available keys for block state is inspect block in debug mode.$(p)Take note, that incorrect values passed to BlockState will case any peripheral to throw errors"
    },
    {
      "type": "text",
      "title": "BlockVisual",
      "anchor": "BlockVisual",
      "text": "BlockVisual is table then $(o)may$() contains next keys:$(br)$(o)string $()$(l)block$(): minecraft block id, for texture reference$(br)$(o)$(l:progressiveperipherals:api_documentation/extra_types#BlockState)BlockState$() $(l)attrs$(): minecraft block state$(br)$(o)boolean $()$(l)playerPassable$(): can player pass block$(br)$(o)boolean $()$(l)lightPassable$(): can light pass block$(br)"
    },
    {
      "type": "text",
      "text": "$(o)boolean $()$(l)skyLightPassable$(): can sky light pass block$(br)$(o)boolean $()$(l)invisible$(): is block invisible$(br)$(o)number $()$(l)lightLevel$(): defines light level from 0 to 15"
    },
    {
      "type": "text",
      "title": "ShapeCube",
      "anchor": "ShapeCube",
      "text": "ShapeCube is table in next format $(o){x1=1, x2=2, y1=1, y2=5, z1=1, z2=10.5}$(). Values should be from 0 to 48.$(p)Additionally this table can have $(l:progressiveperipherals:api_documentation/extra_types#Color)Color$() property with name $(o)color$()."
    },
    {
      "type": "empty",
      "draw_filler": false
    },
    {
      "type": "text",
      "title": "RecipeMapping",
      "anchor": "RecipeMapping",
      "text": "RecipeMapping is table with required $(o)input$() and $(o)output$() fields and optional field $(o)extra$().$(p)$(o)input$() and $(o)output$() are just array of strings, that represents method or fields names of recipe class. All correct fields and method call results will be merged into one big array in time of serialization."
    },
    {
      "type": "text",
      "text": "$(o)extra$() is little trickier. It actually a map of $(o)name=field/method$(), and result of field accessing or method call will be put to result $(o)extra$() field in recipe serialization result."
    }
  ]
}
