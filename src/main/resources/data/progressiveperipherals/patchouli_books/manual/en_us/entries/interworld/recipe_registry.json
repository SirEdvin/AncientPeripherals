{
  "name": "Recipe registry",
  "icon": "progressiveperipherals:recipe_registry",
  "category": "progressiveperipherals:interworld",
  "advancement": "progressiveperipherals:knowledgium",
  "pages": [
    {
      "type": "spotlight",
      "title": "Recipe registry",
      "item": "progressiveperipherals:recipe_registry",
      "text": "Knowledgium researching finally gives you some useful results. The world becomes more and more understandable. With this registry you can extract information about any recipe in the world!"
    },
    {
      "type": "progressiveperipherals:automata",
      "recipe": "progressiveperipherals:recipe_registry"
    },
    {
      "type": "progressiveperipherals:lua_function_left_page",
      "functionName": "getRecipeTypes",
      "description": "Generic function to receive all recipe types registered in game",
      "operationGroup": "queryRegistry"
    },
    {
      "type": "progressiveperipherals:lua_function_right_page",
      "returns": [
        ["{string}", "List of recipe types, decoded are strings, for example $(o)minecraft:crafting$()"]
      ]
    },
    {
      "type": "progressiveperipherals:lua_function_left_page",
      "functionName": "inspectRecipeType",
      "description": "Utility function that helps to understand target recipe class and fields that can be serialized",
      "throw": [
        "Incorrect identifiers provided"
      ],
      "operationGroup": "queryRegistry"
    },
    {
      "type": "progressiveperipherals:lua_function_right_page",
      "parameters": [
        ["string", "recipe type, like $(o)minecraft:crafting$()"]
      ],
      "returns": [
        ["table", "All parsable recipe class fields with example output"]
      ]
    },
    {
      "type": "progressiveperipherals:lua_function_left_page",
      "functionName": "getAllRecipesForType",
      "description": "Function, that allows you to get all recipes for specific type",
      "throw": [
        "Incorrect identifiers provided"
      ],
      "operationGroup": "queryRegistry"
    },
    {
      "type": "progressiveperipherals:lua_function_right_page",
      "parameters": [
        ["string", "recipe type, like $(o)minecraft:crafting$()"],
        ["[$(recipeMapping)]", "Optional custom recipe mapping"]
      ],
      "returns": [
        ["{table}", "List of serialized recipes"]
      ]
    },
    {
      "type": "progressiveperipherals:lua_function_left_page",
      "functionName": "getRecipeForType",
      "description": "Function, that allows you to get particular recipe for specific type",
      "throw": [
        "Incorrect identifiers provided"
      ],
      "operationGroup": "queryRegistry"
    },
    {
      "type": "progressiveperipherals:lua_function_right_page",
      "parameters": [
        ["string", "recipe type, like $(o)minecraft:crafting$()"],
        ["string", "recipe id"],
        ["[$(recipeMapping)]", "Optional custom recipe mapping"]
      ],
      "returns": [
        ["table", "Serialized recipes"]
      ]
    },
    {
      "type": "progressiveperipherals:lua_function_left_page",
      "functionName": "getRecipeFor",
      "description": "Function, that allow you to search recipe for specific item. Please, take a note, then this function may work very unexpected for recipe types from another modifications",
      "throw": [
        "Incorrect identifiers provided"
      ],
      "operationGroup": "queryRegistry"
    },
    {
      "type": "progressiveperipherals:lua_function_right_page",
      "parameters": [
        ["string", "Minecraft ID of item, like $(o)minecraft:oak_planks$()"],
        ["[string | {string}]", "Optional filter, recipe type or list of recipe types. In case of filter absent or * are passed all recipe types will be queued"],
        ["[$(recipeMapping)]", "Optional custom recipe mapping, should be third argument!"]
      ],
      "returns": [
        ["{table}", "List of serialized recipes"]
      ]
    }
  ]
}
