import org.jetbrains.changelog.ExtensionsKt
import java.text.SimpleDateFormat

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.0.20', changing: true
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'org.jetbrains.changelog' version '1.2.1'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${mod_version}" + (Boolean.valueOf(System.getProperty("snapshot")) ? "-SNAPSHOT" : "")
group = 'site.siredvin.progressiveperipherals' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "progressiveperipherals-${minecraft_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

wrapper {
    gradleVersion = '7.1'
    distributionType = Wrapper.DistributionType.ALL
}

def static getenv(path = ".env") {
    def env = [:]

    def file = new File(path)
    if (file.exists()) {
        file.eachLine { line ->
            def (name, value) = line.tokenize("=")
            env[name.trim()] = value.trim()
        }
    }

    return env
}

def secretEnv = getenv()

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: "${mappings_channel}", version: "${mappings_version}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed. 
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                progressiveperipherals {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed. 
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                progressiveperipherals {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed. 
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'progressiveperipherals', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                progressiveperipherals {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    maven { url 'https://squiddev.cc/maven/' }
    maven { url 'https://www.cursemaven.com' }
    maven {
        url 'https://maven.pkg.github.com/SirEdvin/ProgressivePeripherals'
        credentials {
            username = secretEnv["USERNAME"] ?: System.getenv("USERNAME")
            password = secretEnv["TOKEN"] ?: System.getenv("TOKEN")
        }
    }
    maven { url 'https://ldtteam.jfrog.io/ldtteam/modding' }
}

configurations {
    extraLibs
    jsocJavadoc
}

dependencies {
    compileOnly "org.jetbrains:annotations:${jb_annotations}"
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    implementation fg.deobf("org.squiddev:cc-tweaked-${cc_version}")
    implementation fg.deobf("de.srendi.advancedperipherals:advancedperipherals-1.16.5:${ap_version}")
    implementation fg.deobf("mezz.jei:jei-${jei_version}")
    implementation fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

    // internal libraries
    extraLibs "org.ejml:ejml-all:${ejml_version}"

    // Optional integrations

    implementation fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}")

    // Testing stuff
    runtimeOnly fg.deobf("curse.maven:CyclopsCore-${cyclops_core_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_version}")

    configurations.implementation.extendsFrom(configurations.extraLibs)

//    jsocJavadoc 'com.surfapi:javadoc-json-doclet:1.0'
}

changelog {
    version = "${project.version}"
    path = "${project.projectDir}/CHANGELOG.md"
    header = "[${-> version.get()}] - ${new SimpleDateFormat("yyyy-MM-dd").format(new Date())}"
    headerParserRegex = ~/\d+\.\d+\.\d+/
    itemPrefix = "-"
    keepUnreleasedSection = true
    unreleasedTerm = "[Unreleased]"
    groups = ["Added", "Changed", "Deprecated", "Removed", "Fixed", "Security"]
}

task generateJson(type: Javadoc) {
    source = sourceSets.main.allJava
    options.docletpath = configurations.jsocJavadoc.files.asType(List)
    options.doclet = "com.rga78.javadoc.JsonDoclet"
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "progressiveperipherals",
            "Specification-Vendor": "SirEdvin",
            "Specification-Version": "${version}", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"SirEdvin",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    from {
        configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

curseforge {
    apiKey = secretEnv["CURSEFORGE_KEY"] ?: System.getenv("CURSEFORGE_KEY")

    project {
        id = "506252"
        releaseType = "beta"
        mainArtifact(jar) {
            displayName = "Progressive Peripherals ${version}"
            relations {
                requiredDependency 'advanced-peripherals'
                requiredDependency 'cc-tweaked'
                requiredDependency 'patchouli'
            }
        }

        changelog = changelog.get(project.version).withHeader(false).toText()
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId archivesBaseName
            artifact jar
        }
    }
    repositories {
        maven {
            url "https://maven.pkg.github.com/SirEdvin/ProgressivePeripherals"
            credentials {
                username = secretEnv["USERNAME"] ?: System.getenv("USERNAME")
                password = secretEnv["TOKEN"] ?: System.getenv("TOKEN")
            }
        }
    }
}
